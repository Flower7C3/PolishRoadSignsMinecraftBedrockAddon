name: Build, Test & Release Polish Road Signs Addon

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verify project integrity
        run: python3 verify_all.py

      - name: Build all packages (.mcaddon and .mcpack)
        run: |
          python3 build.py --all

      - name: Commit and push version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add BP/manifest.json RP/manifest.json
          git commit -m "Auto-bump version after push" || exit 0
          git push origin main

      - name: List dist contents
        run: ls -lh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.mcaddon
            dist/*.mcpack
          retention-days: 30

      - name: Get version and statistics for release
        id: get_version
        run: |
          VERSION=$(python3 -c "import json; print('.'.join(map(str, json.load(open('BP/manifest.json'))['header']['version'])))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Get statistics from database
          STATS=$(python3 -c "
          import json
          with open('road_signs_full_database.json', 'r', encoding='utf-8') as f:
              data = json.load(f)
          
          categories = len(data['road_signs'])
          total_signs = sum(len(cat['signs']) for cat in data['road_signs'].values())
          
          # Count unique shape/size combinations
          combinations = set()
          for category in data['road_signs'].values():
              for sign in category['signs'].values():
                  width = sign.get('sign_width', 900)
                  height = sign.get('sign_height', 900)
                  shape = sign.get('sign_shape', 'rectangle')
                  combinations.add(f'{shape}_{width}x{height}')
          
          print(f'{categories},{total_signs},{len(combinations)}')
          ")
          
          IFS=',' read -r CATEGORIES TOTAL_SIGNS COMBINATIONS <<< "$STATS"
          echo "categories=$CATEGORIES" >> $GITHUB_OUTPUT
          echo "total_signs=$TOTAL_SIGNS" >> $GITHUB_OUTPUT
          echo "combinations=$COMBINATIONS" >> $GITHUB_OUTPUT

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - name: Validate project structure
        run: |
          echo "Checking project structure..."
          test -f build.py || exit 1
          test -d BP || exit 1
          test -d RP || exit 1
          test -f BP/manifest.json || exit 1
          test -f RP/manifest.json || exit 1
          echo "‚úÖ Project structure is valid"
      - name: Validate manifests
        run: |
          echo "Validating manifests..."
          python3 -c "
          import json
          import sys
          # Check BP manifest
          with open('BP/manifest.json', 'r') as f:
              bp_manifest = json.load(f)
          print(f'BP version: {bp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check RP manifest
          with open('RP/manifest.json', 'r') as f:
              rp_manifest = json.load(f)
          print(f'RP version: {rp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check if versions match
          bp_version = bp_manifest.get('header', {}).get('version', [])
          rp_version = rp_manifest.get('header', {}).get('version', [])
          if bp_version != rp_version:
              print('‚ùå Version mismatch between BP and RP manifests')
              sys.exit(1)
          else:
              print('‚úÖ Manifest versions match')
          "
      - name: Test build artifacts
        run: |
          echo "Testing build artifacts..."
          if [ ! -f dist/*.mcaddon ]; then
            echo "‚ùå No .mcaddon files found"
            exit 1
          fi
          if [ ! -f dist/*.mcpack ]; then
            echo "‚ùå No .mcpack files found"
            exit 1
          fi
          echo "‚úÖ Build artifacts present"

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Release v${{ needs.build.outputs.version }}
          body: |
            ## Polish Road Signs Addon v${{ needs.build.outputs.version }}

            ### üì¶ Zawarto≈õƒá:
            - **PolishRoadSigns.mcaddon** - Kompletny pakiet (lokalna instalacja)
            - **PolishRoadSigns_BP.mcpack** - Behavior Pack (serwery)
            - **PolishRoadSigns_RP.mcpack** - Resource Pack (serwery)

            ### üö¶ Funkcje:
            - Polskie znaki drogowe z oficjalnymi teksturami
            - Automatyczne generowanie tekstur i modeli 3D
            - Kompatybilno≈õƒá z Minecraft Bedrock 1.16.0+

            ### üìã Instalacja:
            **Lokalnie:**
            1. Otw√≥rz plik `.mcaddon` w Minecraft
            2. Aktywuj pakiety w ustawieniach ≈õwiata

            **Serwer:**
            1. Wgraj oba pliki `.mcpack` na serwer
            2. Aktywuj pakiety w ustawieniach ≈õwiata

            ### üìä Statystyki:
            - **${{ needs.build.outputs.categories }} kategorii** znak√≥w drogowych
            - **${{ needs.build.outputs.total_signs }} znak√≥w** z oficjalnymi teksturami
            - **${{ needs.build.outputs.combinations }} kombinacji** kszta≈Çt√≥w i wymiar√≥w 