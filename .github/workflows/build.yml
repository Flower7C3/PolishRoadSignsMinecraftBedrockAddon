name: Build and Release Polish Road Signs Addon

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Auto-bump version in manifests
        run: |
          python3 build_mcaddon.py

      - name: Commit and push version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add BP/manifest.json RP/manifest.json
          git commit -m "Auto-bump version after push" || exit 0
          git push origin main

      - name: Build .mcaddon
        run: python3 build_mcaddon.py

      - name: Build .mcpack
        run: python3 build_mcpack.py

      - name: List dist contents
        run: ls -lh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/*.mcaddon
            dist/*.mcpack
          retention-days: 30

      - name: Get version for release
        id: get_version
        run: |
          VERSION=$(python3 -c "import json; print('.'.join(map(str, json.load(open('BP/manifest.json'))['header']['version'])))")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Release v${{ steps.get_version.outputs.version }}
          body: |
            ## Polish Road Signs Addon ${{ github.sha }}
            
            ### üì¶ Zawarto≈õƒá:
            - PolishRoadSigns.mcaddon (lokalna instalacja)
            - PolishRoadSigns_BP.mcpack (serwery - Behavior Pack)
            - PolishRoadSigns_RP.mcpack (serwery - Resource Pack)
            
            ### üö¶ Funkcje:
            - Wszystkie polskie znaki drogowe (A, B, C, D)
            - Oficjalne nazwy i t≈Çumaczenia
            - Kompatybilno≈õƒá z Minecraft Bedrock 1.16.0+
            - Wsparcie dla serwer√≥w Aternos
            
            ### üìã Instalacja:
            1. **Lokalnie**: Otw√≥rz plik .mcaddon w Minecraft
            2. **Serwer**: Wgraj oba pliki .mcpack na serwer
            
          files: |
            dist/*.mcaddon
            dist/*.mcpack
          draft: false
          prerelease: false

  test:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Validate project structure
        run: |
          echo "Checking project structure..."
          test -f build_mcaddon.py || exit 1
          test -f build_mcpack.py || exit 1
          test -d BP || exit 1
          test -d RP || exit 1
          test -f BP/manifest.json || exit 1
          test -f RP/manifest.json || exit 1
          echo "‚úÖ Project structure is valid"
      - name: Validate manifests
        run: |
          echo "Validating manifests..."
          python3 -c "
          import json
          import sys
          # Check BP manifest
          with open('BP/manifest.json', 'r') as f:
              bp_manifest = json.load(f)
          print(f'BP version: {bp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check RP manifest
          with open('RP/manifest.json', 'r') as f:
              rp_manifest = json.load(f)
          print(f'RP version: {rp_manifest.get(\"header\", {}).get(\"version\", \"missing\")}')
          # Check if versions match
          bp_version = bp_manifest.get('header', {}).get('version', [])
          rp_version = rp_manifest.get('header', {}).get('version', [])
          if bp_version != rp_version:
              print('‚ùå Version mismatch between BP and RP manifests')
              sys.exit(1)
          else:
              print('‚úÖ Manifest versions match')
          "
      - name: Test build process
        run: |
          echo "Testing build process..."
          python3 build_mcaddon.py
          python3 build_mcpack.py
          # Check if files were created
          if [ ! -f dist/*.mcaddon ]; then
            echo "‚ùå No .mcaddon files found"
            exit 1
          fi
          if [ ! -f dist/*.mcpack ]; then
            echo "‚ùå No .mcpack files found"
            exit 1
          fi
          echo "‚úÖ Build process completed successfully" 